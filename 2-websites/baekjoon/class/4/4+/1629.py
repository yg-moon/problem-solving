# 곱셈
# 출처: https://developer-next-to-you.tistory.com/35
def solve(a, b, c):
    if b == 1:
        return a % c
    # b가 짝수면: a의 b//2승을 하고, 다시 2승을 한다. (결과는 a^b)
    elif b % 2 == 0:
        return (solve(a, b // 2, c) ** 2) % c
    # b가 홀수면: a의 b//2승을 하고, 다시 2승을 하고, 또 a를 곱한다. (결과는 a^b)
    else:
        return ((solve(a, b // 2, c) ** 2) * a) % c


A, B, C = map(int, input().split())
print(solve(A, B, C))

"""
- 난이도: 실버1
- 분류: 수학 (분할정복을 이용한 거듭제곱)

- 해설:
    예를 들어, 2^32라면 2를 32번 곱하는 방법도 있지만, (2^16)^2로 풀면
    2를 16번 곱한 것을 다시 2번 곱하니 17번의 연산만으로 끝낼 수 있어 시간이 훨씬 적게 든다.
    이를 계속 해보면 {(2^8)^2}^2 이렇게 풀면 10번만에,
    [{(2^4)^2}^2]^2 이렇게 풀면 7번만에 끝낼 수 있어 시간이 획기적으로 줄어드는 것이다.
"""
