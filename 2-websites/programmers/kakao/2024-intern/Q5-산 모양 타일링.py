def solution(n, tops):
    MOD = 10007
    # dp[i][0]: i번째 삼각형을 덮은 꼬리가 튀어나오지 않은 경우
    # dp[i][1]: i번째 삼각형을 덮은 꼬리가 튀어나온 경우
    dp = [[0] * 2 for _ in range(n)]

    # 초기화
    if tops[0] == 0:
        dp[0][0] = 2
        dp[0][1] = 1
    else:
        dp[0][0] = 3
        dp[0][1] = 1

    # 점화식
    for i in range(1, n):
        if tops[i] == 0:
            dp[i][0] = dp[i - 1][0] * 2 + dp[i - 1][1]
            dp[i][1] = dp[i - 1][0] + dp[i - 1][1]
        else:
            dp[i][0] = dp[i - 1][0] * 3 + dp[i - 1][1] * 2
            dp[i][1] = dp[i - 1][0] + dp[i - 1][1]

        # 주의: 반드시 도중에 나눠주기 (아니면 시간초과)
        dp[i][0] %= MOD
        dp[i][1] %= MOD

    return (dp[n - 1][0] + dp[n - 1][1]) % 10007


"""
- 분류: DP

놓는 방법 4가지
- 1. 위쪽 마름모
- 2. 왼쪽 마름모
- 3. 오른쪽 마름모
- 4. 가운데 삼각형

소감
- 코드는 거의 비슷했는데 접근법은 달랐다.
- 경우를 논리적인 단위로 나누어 접근하자.
"""
