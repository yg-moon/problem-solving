############ Python 관련 #############
# - 출력
#   - f-string: print(f'Sorted array: {array}')
#   - 이게 제일 좋으니 이걸로 통일!!

# - 구현방식
#   - Infinity 구현:
#     - from sys import maxsize
#     - float("Inf")
#   - sorting 방법: sorted(대상, key=lambda item: item[1])
#   - 배열처럼 쓰려면 미리 초기화 해야 함: L = [0] * n1

# - 연산자
#   - \ : 다음 줄까지 코드가 연결됨을 뜻함.
#   - // : 나눗셈 이후 정수로 반올림.
#   - += 연산자
#     - i = i+1 보다 i += 1 이 더 효율적이다.
#     - 전자는 reassigment, 후자는 in-place로 교체하기 때문이다.
#   - ord(): returns an integer for the Unicode character.

# - 타 언어와 차이
#   - 다른 언어에서는 if(node == Null) return을 하는데, 파이썬은 간단히 if root: 가 끝.
#   - Python 이외의 언어에서 swap은 temp을 이용해서 3줄로 진행.

# - List
#   - List representation: defaultdict() 이용.
#     - defaultdict(): KeyError 가 없음.
#   - Matrix representation: 그래프 크기만큼 배열을 0으로 채움.
#   - dict의 max는 '최대 key값'을 의미한다. (value값 아님) (열심히 디버깅으로 찾아냄)
#   - list(dictionary object)를 하면 key만 list로 바뀐다. (item은 무시)
#   - list 합쳐버리기: "".join(arr)


############ 구현 관련 #############
# - Util을 이용하는 이유: 상위 함수에서 만든 지역변수를 이용하기 위해.
# - 특정 조건이 만족할 때 까지 반복: while문이 적합.

# - DP는 Optimal Substructure를 알아야 풀 수 있고 이해할 수 있다.
# - DP 문제들은 디버깅 모드에서 배열의 상태변화를 직접 보면 이해하기 더 쉽다.
# - 변수의 뜻을 명확히 알고 사용하기.

# - Sorting 구현은 어느 index까지 도는지, 어느 조건에 swap 하는지가 중요.


############ 기타 팁 #############
# - 잘 이해가 안 될 때는 그림, 다이어그램 참고
# - 역시 책을 찾으니 이해가 쉽다. 까먹었으면 책을 보자.

# - 코드의 정확한 동작을 이해하려면, idx에 따른 정확한 상태변화를 따라갈 수 있어야.
# - 디버거를 통해 변수의 내용을 단계별로 확인할 수 있다.

# - 코드 분석 방법:
#   - 1. 최종 결과가 어디에서 나오는지 파악.
#   - 2. 각 변수가 무엇을 뜻하는지 파악.
#   - 3. 전체 구현을 이해.
#   - 4. 세부 구현을 이해.

# - 정확한 구현 이해하기:
#   - 값이 변하는 시점을 확인한다. (코드 순서)
#   - critical moment에서 해당 index들이 무슨 역할을 하는지 확인한다. (직접 돌려보기)
#